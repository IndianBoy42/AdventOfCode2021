<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="630" onload="init(evt)" viewBox="0 0 1200 630" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="630" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="613.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="613.00"> </text><svg id="frames" x="10" width="1180"><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="533" width="0.0369%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="517" width="0.0369%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="501" width="0.0369%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="485" width="0.0369%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="469" width="0.0369%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="453" width="0.0369%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="437" width="0.0369%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="421" width="0.0369%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="405" width="0.0369%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="389" width="0.0369%" height="15" fill="rgb(220,122,19)"/><text x="0.2500%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="373" width="0.0369%" height="15" fill="rgb(250,228,42)"/><text x="0.2500%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="357" width="0.0369%" height="15" fill="rgb(240,193,28)"/><text x="0.2500%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="341" width="0.0369%" height="15" fill="rgb(216,20,37)"/><text x="0.2500%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="325" width="0.0369%" height="15" fill="rgb(206,188,39)"/><text x="0.2500%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.0000%" y="309" width="0.0369%" height="15" fill="rgb(217,207,13)"/><text x="0.2500%" y="319.50"></text></g><g><title>regex::compile::Compiler::compile (1 samples, 0.04%)</title><rect x="0.0369%" y="517" width="0.0369%" height="15" fill="rgb(231,73,38)"/><text x="0.2869%" y="527.50"></text></g><g><title>regex::compile::Compiler::compile_one (1 samples, 0.04%)</title><rect x="0.0369%" y="501" width="0.0369%" height="15" fill="rgb(225,20,46)"/><text x="0.2869%" y="511.50"></text></g><g><title>regex::compile::Compiler::c_dotstar (1 samples, 0.04%)</title><rect x="0.0369%" y="485" width="0.0369%" height="15" fill="rgb(210,31,41)"/><text x="0.2869%" y="495.50"></text></g><g><title>regex::compile::Compiler::c_repeat_zero_or_more (1 samples, 0.04%)</title><rect x="0.0369%" y="469" width="0.0369%" height="15" fill="rgb(221,200,47)"/><text x="0.2869%" y="479.50"></text></g><g><title>regex::compile::Compiler::c_class (1 samples, 0.04%)</title><rect x="0.0369%" y="453" width="0.0369%" height="15" fill="rgb(226,26,5)"/><text x="0.2869%" y="463.50"></text></g><g><title>regex::compile::CompileClass::compile (1 samples, 0.04%)</title><rect x="0.0369%" y="437" width="0.0369%" height="15" fill="rgb(249,33,26)"/><text x="0.2869%" y="447.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek (1 samples, 0.04%)</title><rect x="0.0369%" y="421" width="0.0369%" height="15" fill="rgb(235,183,28)"/><text x="0.2869%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1 samples, 0.04%)</title><rect x="0.0369%" y="405" width="0.0369%" height="15" fill="rgb(221,5,38)"/><text x="0.2869%" y="415.50"></text></g><g><title>core::iter::adapters::peekable::Peekable&lt;I&gt;::peek::{{closure}} (1 samples, 0.04%)</title><rect x="0.0369%" y="389" width="0.0369%" height="15" fill="rgb(247,18,42)"/><text x="0.2869%" y="399.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="0.0369%" y="373" width="0.0369%" height="15" fill="rgb(241,131,45)"/><text x="0.2869%" y="383.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="0.0369%" y="357" width="0.0369%" height="15" fill="rgb(249,31,29)"/><text x="0.2869%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.04%)</title><rect x="0.0369%" y="341" width="0.0369%" height="15" fill="rgb(225,111,53)"/><text x="0.2869%" y="351.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="0.0369%" y="325" width="0.0369%" height="15" fill="rgb(238,160,17)"/><text x="0.2869%" y="335.50"></text></g><g><title>regex::exec::ExecBuilder::parse (1 samples, 0.04%)</title><rect x="0.0737%" y="517" width="0.0369%" height="15" fill="rgb(214,148,48)"/><text x="0.3237%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.04%)</title><rect x="0.0737%" y="501" width="0.0369%" height="15" fill="rgb(232,36,49)"/><text x="0.3237%" y="511.50"></text></g><g><title>regex::exec::ExecBuilder::parse::{{closure}} (1 samples, 0.04%)</title><rect x="0.0737%" y="485" width="0.0369%" height="15" fill="rgb(209,103,24)"/><text x="0.3237%" y="495.50"></text></g><g><title>regex_syntax::hir::literal::Literals::union_prefixes (1 samples, 0.04%)</title><rect x="0.0737%" y="469" width="0.0369%" height="15" fill="rgb(229,88,8)"/><text x="0.3237%" y="479.50"></text></g><g><title>regex_syntax::hir::literal::prefixes (1 samples, 0.04%)</title><rect x="0.0737%" y="453" width="0.0369%" height="15" fill="rgb(213,181,19)"/><text x="0.3237%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.15%)</title><rect x="0.0000%" y="549" width="0.1474%" height="15" fill="rgb(254,191,54)"/><text x="0.2500%" y="559.50"></text></g><g><title>regex::exec::ExecBuilder::build (3 samples, 0.11%)</title><rect x="0.0369%" y="533" width="0.1106%" height="15" fill="rgb(241,83,37)"/><text x="0.2869%" y="543.50"></text></g><g><title>regex::literal::imp::LiteralSearcher::prefixes (1 samples, 0.04%)</title><rect x="0.1106%" y="517" width="0.0369%" height="15" fill="rgb(233,36,39)"/><text x="0.3606%" y="527.50"></text></g><g><title>regex::literal::imp::Matcher::prefixes (1 samples, 0.04%)</title><rect x="0.1106%" y="501" width="0.0369%" height="15" fill="rgb(226,3,54)"/><text x="0.3606%" y="511.50"></text></g><g><title>regex::literal::imp::Matcher::new (1 samples, 0.04%)</title><rect x="0.1106%" y="485" width="0.0369%" height="15" fill="rgb(245,192,40)"/><text x="0.3606%" y="495.50"></text></g><g><title>memcmp (1 samples, 0.04%)</title><rect x="0.1106%" y="469" width="0.0369%" height="15" fill="rgb(238,167,29)"/><text x="0.3606%" y="479.50"></text></g><g><title>__bin_chunk (14 samples, 0.52%)</title><rect x="0.1474%" y="549" width="0.5160%" height="15" fill="rgb(232,182,51)"/><text x="0.3974%" y="559.50"></text></g><g><title>__madvise (2 samples, 0.07%)</title><rect x="0.6635%" y="549" width="0.0737%" height="15" fill="rgb(231,60,39)"/><text x="0.9135%" y="559.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="0.6635%" y="533" width="0.0737%" height="15" fill="rgb(208,69,12)"/><text x="0.9135%" y="543.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="0.6635%" y="517" width="0.0737%" height="15" fill="rgb(235,93,37)"/><text x="0.9135%" y="527.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="0.6635%" y="501" width="0.0737%" height="15" fill="rgb(213,116,39)"/><text x="0.9135%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="0.6635%" y="485" width="0.0737%" height="15" fill="rgb(222,207,29)"/><text x="0.9135%" y="495.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="0.6635%" y="469" width="0.0737%" height="15" fill="rgb(206,96,30)"/><text x="0.9135%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="0.6635%" y="453" width="0.0737%" height="15" fill="rgb(218,138,4)"/><text x="0.9135%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="0.6635%" y="437" width="0.0737%" height="15" fill="rgb(250,191,14)"/><text x="0.9135%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7003%" y="421" width="0.0369%" height="15" fill="rgb(239,60,40)"/><text x="0.9503%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7003%" y="405" width="0.0369%" height="15" fill="rgb(206,27,48)"/><text x="0.9503%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7003%" y="389" width="0.0369%" height="15" fill="rgb(225,35,8)"/><text x="0.9503%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7003%" y="373" width="0.0369%" height="15" fill="rgb(250,213,24)"/><text x="0.9503%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7003%" y="357" width="0.0369%" height="15" fill="rgb(247,123,22)"/><text x="0.9503%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7003%" y="341" width="0.0369%" height="15" fill="rgb(231,138,38)"/><text x="0.9503%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7003%" y="325" width="0.0369%" height="15" fill="rgb(231,145,46)"/><text x="0.9503%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="0.7003%" y="309" width="0.0369%" height="15" fill="rgb(251,118,11)"/><text x="0.9503%" y="319.50"></text></g><g><title>__memcpy_fwd (2 samples, 0.07%)</title><rect x="0.7372%" y="549" width="0.0737%" height="15" fill="rgb(217,147,25)"/><text x="0.9872%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="0.8109%" y="437" width="0.0369%" height="15" fill="rgb(247,81,37)"/><text x="1.0609%" y="447.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="0.8109%" y="421" width="0.0369%" height="15" fill="rgb(209,12,38)"/><text x="1.0609%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="0.8109%" y="405" width="0.0369%" height="15" fill="rgb(227,1,9)"/><text x="1.0609%" y="415.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="0.8109%" y="389" width="0.0369%" height="15" fill="rgb(248,47,43)"/><text x="1.0609%" y="399.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.04%)</title><rect x="0.8109%" y="373" width="0.0369%" height="15" fill="rgb(221,10,30)"/><text x="1.0609%" y="383.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.04%)</title><rect x="0.8109%" y="357" width="0.0369%" height="15" fill="rgb(210,229,1)"/><text x="1.0609%" y="367.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.04%)</title><rect x="0.8109%" y="341" width="0.0369%" height="15" fill="rgb(222,148,37)"/><text x="1.0609%" y="351.50"></text></g><g><title>core::slice::memchr::memchr_general_case (1 samples, 0.04%)</title><rect x="0.8109%" y="325" width="0.0369%" height="15" fill="rgb(234,67,33)"/><text x="1.0609%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.04%)</title><rect x="0.8109%" y="309" width="0.0369%" height="15" fill="rgb(247,98,35)"/><text x="1.0609%" y="319.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="0.9583%" y="357" width="0.0737%" height="15" fill="rgb(247,138,52)"/><text x="1.2083%" y="367.50"></text></g><g><title>regex::backtrack::should_exec (1 samples, 0.04%)</title><rect x="1.0321%" y="293" width="0.0369%" height="15" fill="rgb(213,79,30)"/><text x="1.2821%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="1.3638%" y="181" width="0.0369%" height="15" fill="rgb(246,177,23)"/><text x="1.6138%" y="191.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="1.3638%" y="165" width="0.0369%" height="15" fill="rgb(230,62,27)"/><text x="1.6138%" y="175.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="1.3638%" y="149" width="0.0369%" height="15" fill="rgb(216,154,8)"/><text x="1.6138%" y="159.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::find_at (6 samples, 0.22%)</title><rect x="1.2901%" y="197" width="0.2212%" height="15" fill="rgb(244,35,45)"/><text x="1.5401%" y="207.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::verify (3 samples, 0.11%)</title><rect x="1.4007%" y="181" width="0.1106%" height="15" fill="rgb(251,115,12)"/><text x="1.6507%" y="191.50"></text></g><g><title>aho_corasick::packed::pattern::Pattern::is_prefix (2 samples, 0.07%)</title><rect x="1.4375%" y="165" width="0.0737%" height="15" fill="rgb(240,54,50)"/><text x="1.6875%" y="175.50"></text></g><g><title>aho_corasick::packed::pattern::Pattern::equals (1 samples, 0.04%)</title><rect x="1.4744%" y="149" width="0.0369%" height="15" fill="rgb(233,84,52)"/><text x="1.7244%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.4744%" y="133" width="0.0369%" height="15" fill="rgb(207,117,47)"/><text x="1.7244%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.04%)</title><rect x="1.4744%" y="117" width="0.0369%" height="15" fill="rgb(249,43,39)"/><text x="1.7244%" y="127.50"></text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::prefix_at (12 samples, 0.44%)</title><rect x="1.1426%" y="245" width="0.4423%" height="15" fill="rgb(209,38,44)"/><text x="1.3926%" y="255.50"></text></g><g><title>regex::literal::imp::LiteralSearcher::find (11 samples, 0.41%)</title><rect x="1.1795%" y="229" width="0.4055%" height="15" fill="rgb(236,212,23)"/><text x="1.4295%" y="239.50"></text></g><g><title>aho_corasick::packed::api::Searcher::find (8 samples, 0.29%)</title><rect x="1.2901%" y="213" width="0.2949%" height="15" fill="rgb(242,79,21)"/><text x="1.5401%" y="223.50"></text></g><g><title>aho_corasick::packed::teddy::runtime::Teddy::find_at (2 samples, 0.07%)</title><rect x="1.5112%" y="197" width="0.0737%" height="15" fill="rgb(211,96,35)"/><text x="1.7612%" y="207.50"></text></g><g><title>aho_corasick::packed::teddy::runtime::TeddySlim1Mask256::find_at (1 samples, 0.04%)</title><rect x="1.5481%" y="181" width="0.0369%" height="15" fill="rgb(253,215,40)"/><text x="1.7981%" y="191.50"></text></g><g><title>aho_corasick::packed::vector::is_all_zeroes256 (1 samples, 0.04%)</title><rect x="1.5481%" y="165" width="0.0369%" height="15" fill="rgb(211,81,21)"/><text x="1.7981%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.04%)</title><rect x="1.6587%" y="213" width="0.0369%" height="15" fill="rgb(208,190,38)"/><text x="1.9087%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (2 samples, 0.07%)</title><rect x="1.6587%" y="229" width="0.0737%" height="15" fill="rgb(235,213,38)"/><text x="1.9087%" y="239.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="1.6955%" y="213" width="0.0369%" height="15" fill="rgb(237,122,38)"/><text x="1.9455%" y="223.50"></text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::at (1 samples, 0.04%)</title><rect x="2.2116%" y="213" width="0.0369%" height="15" fill="rgb(244,218,35)"/><text x="2.4616%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.07%)</title><rect x="2.2484%" y="213" width="0.0737%" height="15" fill="rgb(240,68,47)"/><text x="2.4984%" y="223.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="2.2484%" y="197" width="0.0737%" height="15" fill="rgb(210,16,53)"/><text x="2.4984%" y="207.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (29 samples, 1.07%)</title><rect x="1.5850%" y="245" width="1.0689%" height="15" fill="rgb(235,124,12)"/><text x="1.8350%" y="255.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (25 samples, 0.92%)</title><rect x="1.7324%" y="229" width="0.9215%" height="15" fill="rgb(224,169,11)"/><text x="1.9824%" y="239.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (9 samples, 0.33%)</title><rect x="2.3222%" y="213" width="0.3317%" height="15" fill="rgb(250,166,2)"/><text x="2.5722%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.04%)</title><rect x="2.6170%" y="197" width="0.0369%" height="15" fill="rgb(242,216,29)"/><text x="2.8670%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.04%)</title><rect x="2.6170%" y="181" width="0.0369%" height="15" fill="rgb(230,116,27)"/><text x="2.8670%" y="191.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::clear (2 samples, 0.07%)</title><rect x="2.6539%" y="245" width="0.0737%" height="15" fill="rgb(228,99,48)"/><text x="2.9039%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.07%)</title><rect x="2.6539%" y="229" width="0.0737%" height="15" fill="rgb(253,11,6)"/><text x="2.9039%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (48 samples, 1.77%)</title><rect x="1.0321%" y="357" width="1.7693%" height="15" fill="rgb(247,143,39)"/><text x="1.2821%" y="367.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at::{{closure}} (48 samples, 1.77%)</title><rect x="1.0321%" y="341" width="1.7693%" height="15" fill="rgb(236,97,10)"/><text x="1.2821%" y="351.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa_type (48 samples, 1.77%)</title><rect x="1.0321%" y="325" width="1.7693%" height="15" fill="rgb(233,208,19)"/><text x="1.2821%" y="335.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (48 samples, 1.77%)</title><rect x="1.0321%" y="309" width="1.7693%" height="15" fill="rgb(216,164,2)"/><text x="1.2821%" y="319.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (47 samples, 1.73%)</title><rect x="1.0689%" y="293" width="1.7324%" height="15" fill="rgb(220,129,5)"/><text x="1.3189%" y="303.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (47 samples, 1.73%)</title><rect x="1.0689%" y="277" width="1.7324%" height="15" fill="rgb(242,17,10)"/><text x="1.3189%" y="287.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (47 samples, 1.73%)</title><rect x="1.0689%" y="261" width="1.7324%" height="15" fill="rgb(242,107,0)"/><text x="1.3189%" y="271.50"></text></g><g><title>regex::literal::imp::LiteralSearcher::is_empty (2 samples, 0.07%)</title><rect x="2.7276%" y="245" width="0.0737%" height="15" fill="rgb(251,28,31)"/><text x="2.9776%" y="255.50"></text></g><g><title>regex::literal::imp::LiteralSearcher::len (2 samples, 0.07%)</title><rect x="2.7276%" y="229" width="0.0737%" height="15" fill="rgb(233,223,10)"/><text x="2.9776%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.04%)</title><rect x="2.8013%" y="341" width="0.0369%" height="15" fill="rgb(215,21,27)"/><text x="3.0513%" y="351.50"></text></g><g><title>aho_corasick::packed::api::Searcher::find_at (1 samples, 0.04%)</title><rect x="2.8382%" y="309" width="0.0369%" height="15" fill="rgb(232,23,21)"/><text x="3.0882%" y="319.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::hash (1 samples, 0.04%)</title><rect x="2.9856%" y="293" width="0.0369%" height="15" fill="rgb(244,5,23)"/><text x="3.2356%" y="303.50"></text></g><g><title>regex::exec::ExecNoSync::find_literals (12 samples, 0.44%)</title><rect x="2.8013%" y="357" width="0.4423%" height="15" fill="rgb(226,81,46)"/><text x="3.0513%" y="367.50"></text></g><g><title>regex::literal::imp::LiteralSearcher::find (11 samples, 0.41%)</title><rect x="2.8382%" y="341" width="0.4055%" height="15" fill="rgb(247,70,30)"/><text x="3.0882%" y="351.50"></text></g><g><title>aho_corasick::packed::api::Searcher::find (11 samples, 0.41%)</title><rect x="2.8382%" y="325" width="0.4055%" height="15" fill="rgb(212,68,19)"/><text x="3.0882%" y="335.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::find_at (10 samples, 0.37%)</title><rect x="2.8750%" y="309" width="0.3686%" height="15" fill="rgb(240,187,13)"/><text x="3.1250%" y="319.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::verify (6 samples, 0.22%)</title><rect x="3.0225%" y="293" width="0.2212%" height="15" fill="rgb(223,113,26)"/><text x="3.2725%" y="303.50"></text></g><g><title>aho_corasick::packed::pattern::Pattern::is_prefix (3 samples, 0.11%)</title><rect x="3.1331%" y="277" width="0.1106%" height="15" fill="rgb(206,192,2)"/><text x="3.3831%" y="287.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (63 samples, 2.32%)</title><rect x="0.9583%" y="389" width="2.3222%" height="15" fill="rgb(241,108,4)"/><text x="1.2083%" y="399.50">&lt;..</text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (63 samples, 2.32%)</title><rect x="0.9583%" y="373" width="2.3222%" height="15" fill="rgb(247,173,49)"/><text x="1.2083%" y="383.50">&lt;..</text></g><g><title>regex::re_trait::Locations::as_slots (1 samples, 0.04%)</title><rect x="3.2436%" y="357" width="0.0369%" height="15" fill="rgb(224,114,35)"/><text x="3.4936%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="3.2436%" y="341" width="0.0369%" height="15" fill="rgb(245,159,27)"/><text x="3.4936%" y="351.50"></text></g><g><title>&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 2.47%)</title><rect x="0.8478%" y="405" width="2.4696%" height="15" fill="rgb(245,172,44)"/><text x="1.0978%" y="415.50">&lt;r..</text></g><g><title>regex::re_trait::RegularExpression::locations (1 samples, 0.04%)</title><rect x="3.2805%" y="389" width="0.0369%" height="15" fill="rgb(236,23,11)"/><text x="3.5305%" y="399.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.04%)</title><rect x="3.2805%" y="373" width="0.0369%" height="15" fill="rgb(205,117,38)"/><text x="3.5305%" y="383.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.04%)</title><rect x="3.2805%" y="357" width="0.0369%" height="15" fill="rgb(237,72,25)"/><text x="3.5305%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.04%)</title><rect x="3.2805%" y="341" width="0.0369%" height="15" fill="rgb(244,70,9)"/><text x="3.5305%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="3.2805%" y="325" width="0.0369%" height="15" fill="rgb(217,125,39)"/><text x="3.5305%" y="335.50"></text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 2.62%)</title><rect x="0.8478%" y="421" width="2.6170%" height="15" fill="rgb(235,36,10)"/><text x="1.0978%" y="431.50">&lt;r..</text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.15%)</title><rect x="3.3174%" y="405" width="0.1474%" height="15" fill="rgb(251,123,47)"/><text x="3.5674%" y="415.50"></text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (2 samples, 0.07%)</title><rect x="3.3911%" y="389" width="0.0737%" height="15" fill="rgb(221,13,13)"/><text x="3.6411%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="3.3911%" y="373" width="0.0737%" height="15" fill="rgb(238,131,9)"/><text x="3.6411%" y="383.50"></text></g><g><title>&lt;regex::re_unicode::Captures as core::ops::index::Index&lt;usize&gt;&gt;::index (1 samples, 0.04%)</title><rect x="3.4648%" y="405" width="0.0369%" height="15" fill="rgb(211,50,8)"/><text x="3.7148%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.04%)</title><rect x="3.4648%" y="389" width="0.0369%" height="15" fill="rgb(245,182,24)"/><text x="3.7148%" y="399.50"></text></g><g><title>&lt;regex::re_unicode::Captures as core::ops::index::Index&lt;usize&gt;&gt;::index::{{closure}} (1 samples, 0.04%)</title><rect x="3.4648%" y="373" width="0.0369%" height="15" fill="rgb(242,14,37)"/><text x="3.7148%" y="383.50"></text></g><g><title>regex::re_unicode::Match::as_str (1 samples, 0.04%)</title><rect x="3.4648%" y="357" width="0.0369%" height="15" fill="rgb(246,228,12)"/><text x="3.7148%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (1 samples, 0.04%)</title><rect x="3.4648%" y="341" width="0.0369%" height="15" fill="rgb(213,55,15)"/><text x="3.7148%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::index (1 samples, 0.04%)</title><rect x="3.4648%" y="325" width="0.0369%" height="15" fill="rgb(209,9,3)"/><text x="3.7148%" y="335.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::Range&lt;usize&gt;&gt;::get (1 samples, 0.04%)</title><rect x="3.4648%" y="309" width="0.0369%" height="15" fill="rgb(230,59,30)"/><text x="3.7148%" y="319.50"></text></g><g><title>core::str::&lt;impl str&gt;::is_char_boundary (1 samples, 0.04%)</title><rect x="3.4648%" y="293" width="0.0369%" height="15" fill="rgb(209,121,21)"/><text x="3.7148%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (73 samples, 2.69%)</title><rect x="0.8478%" y="437" width="2.6907%" height="15" fill="rgb(220,109,13)"/><text x="1.0978%" y="447.50">co..</text></g><g><title>aoc20::day24::parse::{{closure}} (2 samples, 0.07%)</title><rect x="3.4648%" y="421" width="0.0737%" height="15" fill="rgb(232,18,1)"/><text x="3.7148%" y="431.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.04%)</title><rect x="3.5017%" y="405" width="0.0369%" height="15" fill="rgb(215,41,42)"/><text x="3.7517%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.04%)</title><rect x="3.5017%" y="389" width="0.0369%" height="15" fill="rgb(224,123,36)"/><text x="3.7517%" y="399.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.04%)</title><rect x="3.5017%" y="373" width="0.0369%" height="15" fill="rgb(240,125,3)"/><text x="3.7517%" y="383.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.04%)</title><rect x="3.5017%" y="357" width="0.0369%" height="15" fill="rgb(205,98,50)"/><text x="3.7517%" y="367.50"></text></g><g><title>aoc20::day24::part1 (75 samples, 2.76%)</title><rect x="0.8109%" y="469" width="2.7645%" height="15" fill="rgb(205,185,37)"/><text x="1.0609%" y="479.50">ao..</text></g><g><title>aoc20::day24::parse (75 samples, 2.76%)</title><rect x="0.8109%" y="453" width="2.7645%" height="15" fill="rgb(238,207,15)"/><text x="1.0609%" y="463.50">ao..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.04%)</title><rect x="3.5385%" y="437" width="0.0369%" height="15" fill="rgb(213,199,42)"/><text x="3.7885%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.04%)</title><rect x="3.5385%" y="421" width="0.0369%" height="15" fill="rgb(235,201,11)"/><text x="3.7885%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1 samples, 0.04%)</title><rect x="3.5385%" y="405" width="0.0369%" height="15" fill="rgb(207,46,11)"/><text x="3.7885%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="3.5385%" y="389" width="0.0369%" height="15" fill="rgb(241,35,35)"/><text x="3.7885%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="3.5385%" y="373" width="0.0369%" height="15" fill="rgb(243,32,47)"/><text x="3.7885%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (1 samples, 0.04%)</title><rect x="3.5385%" y="357" width="0.0369%" height="15" fill="rgb(247,202,23)"/><text x="3.7885%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.04%)</title><rect x="3.5385%" y="341" width="0.0369%" height="15" fill="rgb(219,102,11)"/><text x="3.7885%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.04%)</title><rect x="3.5385%" y="325" width="0.0369%" height="15" fill="rgb(243,110,44)"/><text x="3.7885%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.33%)</title><rect x="4.6074%" y="421" width="0.3317%" height="15" fill="rgb(222,74,54)"/><text x="4.8574%" y="431.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.07%)</title><rect x="4.8655%" y="405" width="0.0737%" height="15" fill="rgb(216,99,12)"/><text x="5.1155%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.07%)</title><rect x="4.8655%" y="389" width="0.0737%" height="15" fill="rgb(226,22,26)"/><text x="5.1155%" y="399.50"></text></g><g><title>aoc20::day24::part2::{{closure}} (30 samples, 1.11%)</title><rect x="4.9392%" y="405" width="1.1058%" height="15" fill="rgb(217,163,10)"/><text x="5.1892%" y="415.50"></text></g><g><title>aoc20::day24::part2::{{closure}}::{{closure}} (49 samples, 1.81%)</title><rect x="6.0450%" y="405" width="1.8061%" height="15" fill="rgb(213,25,53)"/><text x="6.2950%" y="415.50">a..</text></g><g><title>aoc20::day24::part2::{{closure}} (33 samples, 1.22%)</title><rect x="6.6347%" y="389" width="1.2164%" height="15" fill="rgb(252,105,26)"/><text x="6.8847%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.18%)</title><rect x="7.8511%" y="293" width="0.1843%" height="15" fill="rgb(220,39,43)"/><text x="8.1011%" y="303.50"></text></g><g><title>aoc20::day24::part2::{{closure}}::{{closure}} (57 samples, 2.10%)</title><rect x="8.0354%" y="277" width="2.1010%" height="15" fill="rgb(229,68,48)"/><text x="8.2854%" y="287.50">a..</text></g><g><title>aoc20::day24::part2::{{closure}} (26 samples, 0.96%)</title><rect x="9.1780%" y="261" width="0.9583%" height="15" fill="rgb(252,8,32)"/><text x="9.4280%" y="271.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (56 samples, 2.06%)</title><rect x="10.1364%" y="69" width="2.0641%" height="15" fill="rgb(223,20,43)"/><text x="10.3864%" y="79.50">&lt;..</text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (10 samples, 0.37%)</title><rect x="12.2005%" y="69" width="0.3686%" height="15" fill="rgb(229,81,49)"/><text x="12.4505%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (107 samples, 3.94%)</title><rect x="10.1364%" y="165" width="3.9440%" height="15" fill="rgb(236,28,36)"/><text x="10.3864%" y="175.50">hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B,C)&gt;::hash (107 samples, 3.94%)</title><rect x="10.1364%" y="149" width="3.9440%" height="15" fill="rgb(249,185,26)"/><text x="10.3864%" y="159.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (107 samples, 3.94%)</title><rect x="10.1364%" y="133" width="3.9440%" height="15" fill="rgb(249,174,33)"/><text x="10.3864%" y="143.50">core..</text></g><g><title>core::hash::Hasher::write_i32 (107 samples, 3.94%)</title><rect x="10.1364%" y="117" width="3.9440%" height="15" fill="rgb(233,201,37)"/><text x="10.3864%" y="127.50">core..</text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u32 (107 samples, 3.94%)</title><rect x="10.1364%" y="101" width="3.9440%" height="15" fill="rgb(221,78,26)"/><text x="10.3864%" y="111.50">&lt;fxh..</text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (107 samples, 3.94%)</title><rect x="10.1364%" y="85" width="3.9440%" height="15" fill="rgb(250,127,30)"/><text x="10.3864%" y="95.50">&lt;usi..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (41 samples, 1.51%)</title><rect x="12.5691%" y="69" width="1.5112%" height="15" fill="rgb(230,49,44)"/><text x="12.8191%" y="79.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (33 samples, 1.22%)</title><rect x="24.4379%" y="85" width="1.2164%" height="15" fill="rgb(229,67,23)"/><text x="24.6879%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (326 samples, 12.02%)</title><rect x="17.8769%" y="101" width="12.0162%" height="15" fill="rgb(249,83,47)"/><text x="18.1269%" y="111.50">&lt;hashbrown::raw::b..</text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (115 samples, 4.24%)</title><rect x="25.6543%" y="85" width="4.2388%" height="15" fill="rgb(215,43,3)"/><text x="25.9043%" y="95.50">hashb..</text></g><g><title>hashbrown::raw::ProbeSeq::move_next (48 samples, 1.77%)</title><rect x="29.8931%" y="101" width="1.7693%" height="15" fill="rgb(238,154,13)"/><text x="30.1431%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (512 samples, 18.87%)</title><rect x="16.1076%" y="117" width="18.8721%" height="15" fill="rgb(219,56,2)"/><text x="16.3576%" y="127.50">&lt;hashbrown::raw::RawIterHashI..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (90 samples, 3.32%)</title><rect x="31.6624%" y="101" width="3.3174%" height="15" fill="rgb(233,0,4)"/><text x="31.9124%" y="111.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (90 samples, 3.32%)</title><rect x="31.6624%" y="85" width="3.3174%" height="15" fill="rgb(235,30,7)"/><text x="31.9124%" y="95.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (90 samples, 3.32%)</title><rect x="31.6624%" y="69" width="3.3174%" height="15" fill="rgb(250,79,13)"/><text x="31.9124%" y="79.50">cor..</text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (539 samples, 19.87%)</title><rect x="15.7759%" y="133" width="19.8673%" height="15" fill="rgb(211,146,34)"/><text x="16.0259%" y="143.50">&lt;hashbrown::raw::RawIterHash&lt;T,..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (18 samples, 0.66%)</title><rect x="34.9797%" y="117" width="0.6635%" height="15" fill="rgb(228,22,38)"/><text x="35.2297%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (18 samples, 0.66%)</title><rect x="34.9797%" y="101" width="0.6635%" height="15" fill="rgb(235,168,5)"/><text x="35.2297%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (18 samples, 0.66%)</title><rect x="34.9797%" y="85" width="0.6635%" height="15" fill="rgb(221,155,16)"/><text x="35.2297%" y="95.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (18 samples, 0.66%)</title><rect x="34.9797%" y="69" width="0.6635%" height="15" fill="rgb(215,215,53)"/><text x="35.2297%" y="79.50"></text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (18 samples, 0.66%)</title><rect x="34.9797%" y="53" width="0.6635%" height="15" fill="rgb(223,4,10)"/><text x="35.2297%" y="63.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (154 samples, 5.68%)</title><rect x="35.6432%" y="133" width="5.6764%" height="15" fill="rgb(234,103,6)"/><text x="35.8932%" y="143.50">hashbro..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B,C)&gt;::eq (154 samples, 5.68%)</title><rect x="35.6432%" y="117" width="5.6764%" height="15" fill="rgb(227,97,0)"/><text x="35.8932%" y="127.50">core::t..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (17 samples, 0.63%)</title><rect x="40.6930%" y="101" width="0.6266%" height="15" fill="rgb(234,150,53)"/><text x="40.9430%" y="111.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (11 samples, 0.41%)</title><rect x="41.3196%" y="133" width="0.4055%" height="15" fill="rgb(228,201,54)"/><text x="41.5696%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (11 samples, 0.41%)</title><rect x="41.3196%" y="117" width="0.4055%" height="15" fill="rgb(222,22,37)"/><text x="41.5696%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (11 samples, 0.41%)</title><rect x="41.3196%" y="101" width="0.4055%" height="15" fill="rgb(237,53,32)"/><text x="41.5696%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.41%)</title><rect x="41.3196%" y="85" width="0.4055%" height="15" fill="rgb(233,25,53)"/><text x="41.5696%" y="95.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (15 samples, 0.55%)</title><rect x="41.7250%" y="85" width="0.5529%" height="15" fill="rgb(210,40,34)"/><text x="41.9750%" y="95.50"></text></g><g><title>hashbrown::raw::h2 (36 samples, 1.33%)</title><rect x="42.2779%" y="85" width="1.3269%" height="15" fill="rgb(241,220,44)"/><text x="42.5279%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count::to_usize::{{closure}} (923 samples, 34.02%)</title><rect x="10.1364%" y="261" width="34.0214%" height="15" fill="rgb(235,28,35)"/><text x="10.3864%" y="271.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::ite..</text></g><g><title>aoc20::day24::part2::{{closure}}::{{closure}} (923 samples, 34.02%)</title><rect x="10.1364%" y="245" width="34.0214%" height="15" fill="rgb(210,56,17)"/><text x="10.3864%" y="255.50">aoc20::day24::part2::{{closure}}::{{closure}}</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (923 samples, 34.02%)</title><rect x="10.1364%" y="229" width="34.0214%" height="15" fill="rgb(224,130,29)"/><text x="10.3864%" y="239.50">std::collections::hash::set::HashSet&lt;T,S&gt;::contains</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (923 samples, 34.02%)</title><rect x="10.1364%" y="213" width="34.0214%" height="15" fill="rgb(235,212,8)"/><text x="10.3864%" y="223.50">hashbrown::set::HashSet&lt;T,S,A&gt;::contains</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (923 samples, 34.02%)</title><rect x="10.1364%" y="197" width="34.0214%" height="15" fill="rgb(223,33,50)"/><text x="10.3864%" y="207.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (923 samples, 34.02%)</title><rect x="10.1364%" y="181" width="34.0214%" height="15" fill="rgb(219,149,13)"/><text x="10.3864%" y="191.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (816 samples, 30.08%)</title><rect x="14.0804%" y="165" width="30.0774%" height="15" fill="rgb(250,156,29)"/><text x="14.3304%" y="175.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (816 samples, 30.08%)</title><rect x="14.0804%" y="149" width="30.0774%" height="15" fill="rgb(216,193,19)"/><text x="14.3304%" y="159.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (66 samples, 2.43%)</title><rect x="41.7250%" y="133" width="2.4327%" height="15" fill="rgb(216,135,14)"/><text x="41.9750%" y="143.50">ha..</text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (66 samples, 2.43%)</title><rect x="41.7250%" y="117" width="2.4327%" height="15" fill="rgb(241,47,5)"/><text x="41.9750%" y="127.50">ha..</text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (66 samples, 2.43%)</title><rect x="41.7250%" y="101" width="2.4327%" height="15" fill="rgb(233,42,35)"/><text x="41.9750%" y="111.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (15 samples, 0.55%)</title><rect x="43.6049%" y="85" width="0.5529%" height="15" fill="rgb(231,13,6)"/><text x="43.8549%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (15 samples, 0.55%)</title><rect x="43.6049%" y="69" width="0.5529%" height="15" fill="rgb(207,181,40)"/><text x="43.8549%" y="79.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (15 samples, 0.55%)</title><rect x="43.6049%" y="53" width="0.5529%" height="15" fill="rgb(254,173,49)"/><text x="43.8549%" y="63.50"></text></g><g><title>core::core_arch::simd::i8x16::new (15 samples, 0.55%)</title><rect x="43.6049%" y="37" width="0.5529%" height="15" fill="rgb(221,1,38)"/><text x="43.8549%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (994 samples, 36.64%)</title><rect x="7.8511%" y="389" width="36.6384%" height="15" fill="rgb(206,124,46)"/><text x="8.1011%" y="399.50">&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::tr..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (994 samples, 36.64%)</title><rect x="7.8511%" y="373" width="36.6384%" height="15" fill="rgb(249,21,11)"/><text x="8.1011%" y="383.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (994 samples, 36.64%)</title><rect x="7.8511%" y="357" width="36.6384%" height="15" fill="rgb(222,201,40)"/><text x="8.1011%" y="367.50">&lt;usize as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (994 samples, 36.64%)</title><rect x="7.8511%" y="341" width="36.6384%" height="15" fill="rgb(235,61,29)"/><text x="8.1011%" y="351.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (994 samples, 36.64%)</title><rect x="7.8511%" y="325" width="36.6384%" height="15" fill="rgb(219,207,3)"/><text x="8.1011%" y="335.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (994 samples, 36.64%)</title><rect x="7.8511%" y="309" width="36.6384%" height="15" fill="rgb(222,56,46)"/><text x="8.1011%" y="319.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (989 samples, 36.45%)</title><rect x="8.0354%" y="293" width="36.4541%" height="15" fill="rgb(239,76,54)"/><text x="8.2854%" y="303.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (932 samples, 34.35%)</title><rect x="10.1364%" y="277" width="34.3531%" height="15" fill="rgb(231,124,27)"/><text x="10.3864%" y="287.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (9 samples, 0.33%)</title><rect x="44.1578%" y="261" width="0.3317%" height="15" fill="rgb(249,195,6)"/><text x="44.4078%" y="271.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (4 samples, 0.15%)</title><rect x="44.4895%" y="229" width="0.1474%" height="15" fill="rgb(237,174,47)"/><text x="44.7395%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (26 samples, 0.96%)</title><rect x="44.6369%" y="229" width="0.9583%" height="15" fill="rgb(206,201,31)"/><text x="44.8869%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (45 samples, 1.66%)</title><rect x="44.4895%" y="325" width="1.6587%" height="15" fill="rgb(231,57,52)"/><text x="44.7395%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B,C)&gt;::hash (45 samples, 1.66%)</title><rect x="44.4895%" y="309" width="1.6587%" height="15" fill="rgb(248,177,22)"/><text x="44.7395%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (45 samples, 1.66%)</title><rect x="44.4895%" y="293" width="1.6587%" height="15" fill="rgb(215,211,37)"/><text x="44.7395%" y="303.50"></text></g><g><title>core::hash::Hasher::write_i32 (45 samples, 1.66%)</title><rect x="44.4895%" y="277" width="1.6587%" height="15" fill="rgb(241,128,51)"/><text x="44.7395%" y="287.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u32 (45 samples, 1.66%)</title><rect x="44.4895%" y="261" width="1.6587%" height="15" fill="rgb(227,165,31)"/><text x="44.7395%" y="271.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (45 samples, 1.66%)</title><rect x="44.4895%" y="245" width="1.6587%" height="15" fill="rgb(228,167,24)"/><text x="44.7395%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (15 samples, 0.55%)</title><rect x="45.5953%" y="229" width="0.5529%" height="15" fill="rgb(228,143,12)"/><text x="45.8453%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (209 samples, 7.70%)</title><rect x="49.9079%" y="261" width="7.7036%" height="15" fill="rgb(249,149,8)"/><text x="50.1579%" y="271.50">&lt;hashbrown:..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (71 samples, 2.62%)</title><rect x="54.9945%" y="245" width="2.6170%" height="15" fill="rgb(243,35,44)"/><text x="55.2445%" y="255.50">ha..</text></g><g><title>hashbrown::raw::ProbeSeq::move_next (27 samples, 1.00%)</title><rect x="57.6115%" y="261" width="0.9952%" height="15" fill="rgb(246,89,9)"/><text x="57.8615%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (355 samples, 13.09%)</title><rect x="48.3229%" y="277" width="13.0851%" height="15" fill="rgb(233,213,13)"/><text x="48.5729%" y="287.50">&lt;hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (76 samples, 2.80%)</title><rect x="58.6067%" y="261" width="2.8013%" height="15" fill="rgb(233,141,41)"/><text x="58.8567%" y="271.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (76 samples, 2.80%)</title><rect x="58.6067%" y="245" width="2.8013%" height="15" fill="rgb(239,167,4)"/><text x="58.8567%" y="255.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (76 samples, 2.80%)</title><rect x="58.6067%" y="229" width="2.8013%" height="15" fill="rgb(209,217,16)"/><text x="58.8567%" y="239.50">co..</text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (383 samples, 14.12%)</title><rect x="47.9174%" y="293" width="14.1172%" height="15" fill="rgb(219,88,35)"/><text x="48.1674%" y="303.50">&lt;hashbrown::raw::RawI..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (17 samples, 0.63%)</title><rect x="61.4080%" y="277" width="0.6266%" height="15" fill="rgb(220,193,23)"/><text x="61.6580%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (17 samples, 0.63%)</title><rect x="61.4080%" y="261" width="0.6266%" height="15" fill="rgb(230,90,52)"/><text x="61.6580%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (17 samples, 0.63%)</title><rect x="61.4080%" y="245" width="0.6266%" height="15" fill="rgb(252,106,19)"/><text x="61.6580%" y="255.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (17 samples, 0.63%)</title><rect x="61.4080%" y="229" width="0.6266%" height="15" fill="rgb(206,74,20)"/><text x="61.6580%" y="239.50"></text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (17 samples, 0.63%)</title><rect x="61.4080%" y="213" width="0.6266%" height="15" fill="rgb(230,138,44)"/><text x="61.6580%" y="223.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (112 samples, 4.13%)</title><rect x="62.0346%" y="293" width="4.1283%" height="15" fill="rgb(235,182,43)"/><text x="62.2846%" y="303.50">hash..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B,C)&gt;::eq (112 samples, 4.13%)</title><rect x="62.0346%" y="277" width="4.1283%" height="15" fill="rgb(242,16,51)"/><text x="62.2846%" y="287.50">core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (9 samples, 0.33%)</title><rect x="65.8312%" y="261" width="0.3317%" height="15" fill="rgb(248,9,4)"/><text x="66.0812%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (12 samples, 0.44%)</title><rect x="66.1629%" y="293" width="0.4423%" height="15" fill="rgb(210,31,22)"/><text x="66.4129%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (12 samples, 0.44%)</title><rect x="66.1629%" y="277" width="0.4423%" height="15" fill="rgb(239,54,39)"/><text x="66.4129%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12 samples, 0.44%)</title><rect x="66.1629%" y="261" width="0.4423%" height="15" fill="rgb(230,99,41)"/><text x="66.4129%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (12 samples, 0.44%)</title><rect x="66.1629%" y="245" width="0.4423%" height="15" fill="rgb(253,106,12)"/><text x="66.4129%" y="255.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (9 samples, 0.33%)</title><rect x="66.6052%" y="245" width="0.3317%" height="15" fill="rgb(213,46,41)"/><text x="66.8552%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (34 samples, 1.25%)</title><rect x="66.9370%" y="245" width="1.2532%" height="15" fill="rgb(215,133,35)"/><text x="67.1870%" y="255.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (647 samples, 23.85%)</title><rect x="44.4895%" y="389" width="23.8481%" height="15" fill="rgb(213,28,5)"/><text x="44.7395%" y="399.50">std::collections::hash::set::HashSet&lt;T..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (647 samples, 23.85%)</title><rect x="44.4895%" y="373" width="23.8481%" height="15" fill="rgb(215,77,49)"/><text x="44.7395%" y="383.50">hashbrown::set::HashSet&lt;T,S,A&gt;::contai..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (647 samples, 23.85%)</title><rect x="44.4895%" y="357" width="23.8481%" height="15" fill="rgb(248,100,22)"/><text x="44.7395%" y="367.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::cont..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (647 samples, 23.85%)</title><rect x="44.4895%" y="341" width="23.8481%" height="15" fill="rgb(208,67,9)"/><text x="44.7395%" y="351.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (602 samples, 22.19%)</title><rect x="46.1482%" y="325" width="22.1895%" height="15" fill="rgb(219,133,21)"/><text x="46.3982%" y="335.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (602 samples, 22.19%)</title><rect x="46.1482%" y="309" width="22.1895%" height="15" fill="rgb(246,46,29)"/><text x="46.3982%" y="319.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (47 samples, 1.73%)</title><rect x="66.6052%" y="293" width="1.7324%" height="15" fill="rgb(246,185,52)"/><text x="66.8552%" y="303.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (47 samples, 1.73%)</title><rect x="66.6052%" y="277" width="1.7324%" height="15" fill="rgb(252,136,11)"/><text x="66.8552%" y="287.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (47 samples, 1.73%)</title><rect x="66.6052%" y="261" width="1.7324%" height="15" fill="rgb(219,138,53)"/><text x="66.8552%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.15%)</title><rect x="68.1902%" y="245" width="0.1474%" height="15" fill="rgb(211,51,23)"/><text x="68.4402%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (4 samples, 0.15%)</title><rect x="68.1902%" y="229" width="0.1474%" height="15" fill="rgb(247,221,28)"/><text x="68.4402%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (4 samples, 0.15%)</title><rect x="68.1902%" y="213" width="0.1474%" height="15" fill="rgb(251,222,45)"/><text x="68.4402%" y="223.50"></text></g><g><title>core::core_arch::simd::i8x16::new (4 samples, 0.15%)</title><rect x="68.1902%" y="197" width="0.1474%" height="15" fill="rgb(217,162,53)"/><text x="68.4402%" y="207.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (8 samples, 0.29%)</title><rect x="70.9915%" y="245" width="0.2949%" height="15" fill="rgb(229,93,14)"/><text x="71.2415%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (5 samples, 0.18%)</title><rect x="71.2864%" y="245" width="0.1843%" height="15" fill="rgb(209,67,49)"/><text x="71.5364%" y="255.50"></text></g><g><title>hashbrown::map::make_insert_hash (25 samples, 0.92%)</title><rect x="70.6966%" y="341" width="0.9215%" height="15" fill="rgb(213,87,29)"/><text x="70.9466%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B,C)&gt;::hash (25 samples, 0.92%)</title><rect x="70.6966%" y="325" width="0.9215%" height="15" fill="rgb(205,151,52)"/><text x="70.9466%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (25 samples, 0.92%)</title><rect x="70.6966%" y="309" width="0.9215%" height="15" fill="rgb(253,215,39)"/><text x="70.9466%" y="319.50"></text></g><g><title>core::hash::Hasher::write_i32 (25 samples, 0.92%)</title><rect x="70.6966%" y="293" width="0.9215%" height="15" fill="rgb(221,220,41)"/><text x="70.9466%" y="303.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u32 (25 samples, 0.92%)</title><rect x="70.6966%" y="277" width="0.9215%" height="15" fill="rgb(218,133,21)"/><text x="70.9466%" y="287.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (17 samples, 0.63%)</title><rect x="70.9915%" y="261" width="0.6266%" height="15" fill="rgb(221,193,43)"/><text x="71.2415%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (4 samples, 0.15%)</title><rect x="71.4707%" y="245" width="0.1474%" height="15" fill="rgb(240,128,52)"/><text x="71.7207%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (120 samples, 4.42%)</title><rect x="73.8297%" y="277" width="4.4231%" height="15" fill="rgb(253,114,12)"/><text x="74.0797%" y="287.50">&lt;hash..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (35 samples, 1.29%)</title><rect x="76.9628%" y="261" width="1.2901%" height="15" fill="rgb(215,223,47)"/><text x="77.2128%" y="271.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (2 samples, 0.07%)</title><rect x="78.2529%" y="277" width="0.0737%" height="15" fill="rgb(248,225,23)"/><text x="78.5029%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (184 samples, 6.78%)</title><rect x="73.4243%" y="293" width="6.7822%" height="15" fill="rgb(250,108,0)"/><text x="73.6743%" y="303.50">&lt;hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (51 samples, 1.88%)</title><rect x="78.3266%" y="277" width="1.8798%" height="15" fill="rgb(228,208,7)"/><text x="78.5766%" y="287.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (51 samples, 1.88%)</title><rect x="78.3266%" y="261" width="1.8798%" height="15" fill="rgb(244,45,10)"/><text x="78.5766%" y="271.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (51 samples, 1.88%)</title><rect x="78.3266%" y="245" width="1.8798%" height="15" fill="rgb(207,125,25)"/><text x="78.5766%" y="255.50">c..</text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (196 samples, 7.22%)</title><rect x="73.2400%" y="309" width="7.2245%" height="15" fill="rgb(210,195,18)"/><text x="73.4900%" y="319.50">&lt;hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (7 samples, 0.26%)</title><rect x="80.2064%" y="293" width="0.2580%" height="15" fill="rgb(249,80,12)"/><text x="80.4564%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (7 samples, 0.26%)</title><rect x="80.2064%" y="277" width="0.2580%" height="15" fill="rgb(221,65,9)"/><text x="80.4564%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7 samples, 0.26%)</title><rect x="80.2064%" y="261" width="0.2580%" height="15" fill="rgb(235,49,36)"/><text x="80.4564%" y="271.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (7 samples, 0.26%)</title><rect x="80.2064%" y="245" width="0.2580%" height="15" fill="rgb(225,32,20)"/><text x="80.4564%" y="255.50"></text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (7 samples, 0.26%)</title><rect x="80.2064%" y="229" width="0.2580%" height="15" fill="rgb(215,141,46)"/><text x="80.4564%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (108 samples, 3.98%)</title><rect x="80.4644%" y="309" width="3.9808%" height="15" fill="rgb(250,160,47)"/><text x="80.7144%" y="319.50">hash..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B,C)&gt;::eq (108 samples, 3.98%)</title><rect x="80.4644%" y="293" width="3.9808%" height="15" fill="rgb(216,222,40)"/><text x="80.7144%" y="303.50">core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for i32&gt;::eq (16 samples, 0.59%)</title><rect x="83.8555%" y="277" width="0.5898%" height="15" fill="rgb(234,217,39)"/><text x="84.1055%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (6 samples, 0.22%)</title><rect x="84.4453%" y="309" width="0.2212%" height="15" fill="rgb(207,178,40)"/><text x="84.6953%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (6 samples, 0.22%)</title><rect x="84.4453%" y="293" width="0.2212%" height="15" fill="rgb(221,136,13)"/><text x="84.6953%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6 samples, 0.22%)</title><rect x="84.4453%" y="277" width="0.2212%" height="15" fill="rgb(249,199,10)"/><text x="84.6953%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.22%)</title><rect x="84.4453%" y="261" width="0.2212%" height="15" fill="rgb(249,222,13)"/><text x="84.6953%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (48 samples, 1.77%)</title><rect x="85.0719%" y="261" width="1.7693%" height="15" fill="rgb(244,185,38)"/><text x="85.3219%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (13 samples, 0.48%)</title><rect x="86.8411%" y="261" width="0.4792%" height="15" fill="rgb(236,202,9)"/><text x="87.0911%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.07%)</title><rect x="87.3203%" y="261" width="0.0737%" height="15" fill="rgb(250,229,37)"/><text x="87.5703%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.07%)</title><rect x="87.3203%" y="245" width="0.0737%" height="15" fill="rgb(206,174,23)"/><text x="87.5703%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (430 samples, 15.85%)</title><rect x="71.6181%" y="341" width="15.8496%" height="15" fill="rgb(211,33,43)"/><text x="71.8681%" y="351.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (430 samples, 15.85%)</title><rect x="71.6181%" y="325" width="15.8496%" height="15" fill="rgb(245,58,50)"/><text x="71.8681%" y="335.50">hashbrown::raw::RawTable..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (76 samples, 2.80%)</title><rect x="84.6664%" y="309" width="2.8013%" height="15" fill="rgb(244,68,36)"/><text x="84.9164%" y="319.50">ha..</text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (76 samples, 2.80%)</title><rect x="84.6664%" y="293" width="2.8013%" height="15" fill="rgb(232,229,15)"/><text x="84.9164%" y="303.50">ha..</text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (76 samples, 2.80%)</title><rect x="84.6664%" y="277" width="2.8013%" height="15" fill="rgb(254,30,23)"/><text x="84.9164%" y="287.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.07%)</title><rect x="87.3940%" y="261" width="0.0737%" height="15" fill="rgb(235,160,14)"/><text x="87.6440%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.07%)</title><rect x="87.3940%" y="245" width="0.0737%" height="15" fill="rgb(212,155,44)"/><text x="87.6440%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.07%)</title><rect x="87.3940%" y="229" width="0.0737%" height="15" fill="rgb(226,2,50)"/><text x="87.6440%" y="239.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.07%)</title><rect x="87.3940%" y="213" width="0.0737%" height="15" fill="rgb(234,177,6)"/><text x="87.6440%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (36 samples, 1.33%)</title><rect x="87.4677%" y="309" width="1.3269%" height="15" fill="rgb(217,24,9)"/><text x="87.7177%" y="319.50"></text></g><g><title>core::ptr::write (36 samples, 1.33%)</title><rect x="87.4677%" y="293" width="1.3269%" height="15" fill="rgb(220,13,46)"/><text x="87.7177%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (45 samples, 1.66%)</title><rect x="87.4677%" y="325" width="1.6587%" height="15" fill="rgb(239,221,27)"/><text x="87.7177%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (9 samples, 0.33%)</title><rect x="88.7947%" y="309" width="0.3317%" height="15" fill="rgb(222,198,25)"/><text x="89.0447%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9 samples, 0.33%)</title><rect x="88.7947%" y="293" width="0.3317%" height="15" fill="rgb(211,99,13)"/><text x="89.0447%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.33%)</title><rect x="88.7947%" y="277" width="0.3317%" height="15" fill="rgb(232,111,31)"/><text x="89.0447%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.07%)</title><rect x="89.1264%" y="325" width="0.0737%" height="15" fill="rgb(245,82,37)"/><text x="89.3764%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.07%)</title><rect x="89.1264%" y="309" width="0.0737%" height="15" fill="rgb(227,149,46)"/><text x="89.3764%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="89.1264%" y="293" width="0.0737%" height="15" fill="rgb(218,36,50)"/><text x="89.3764%" y="303.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (2 samples, 0.07%)</title><rect x="89.1264%" y="277" width="0.0737%" height="15" fill="rgb(226,80,48)"/><text x="89.3764%" y="287.50"></text></g><g><title>core::num::&lt;impl isize&gt;::overflowing_neg (2 samples, 0.07%)</title><rect x="89.1264%" y="261" width="0.0737%" height="15" fill="rgb(238,224,15)"/><text x="89.3764%" y="271.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (2 samples, 0.07%)</title><rect x="89.2001%" y="277" width="0.0737%" height="15" fill="rgb(241,136,10)"/><text x="89.4501%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from_nonoverlapping (2 samples, 0.07%)</title><rect x="89.2001%" y="261" width="0.0737%" height="15" fill="rgb(208,32,45)"/><text x="89.4501%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.07%)</title><rect x="89.2001%" y="245" width="0.0737%" height="15" fill="rgb(207,135,9)"/><text x="89.4501%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="229" width="0.0369%" height="15" fill="rgb(206,86,44)"/><text x="89.4870%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="213" width="0.0369%" height="15" fill="rgb(245,177,15)"/><text x="89.4870%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="197" width="0.0369%" height="15" fill="rgb(206,64,50)"/><text x="89.4870%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="181" width="0.0369%" height="15" fill="rgb(234,36,40)"/><text x="89.4870%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="165" width="0.0369%" height="15" fill="rgb(213,64,8)"/><text x="89.4870%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="149" width="0.0369%" height="15" fill="rgb(210,75,36)"/><text x="89.4870%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="133" width="0.0369%" height="15" fill="rgb(229,88,21)"/><text x="89.4870%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="117" width="0.0369%" height="15" fill="rgb(252,204,47)"/><text x="89.4870%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="101" width="0.0369%" height="15" fill="rgb(208,77,27)"/><text x="89.4870%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.04%)</title><rect x="89.2370%" y="85" width="0.0369%" height="15" fill="rgb(221,76,26)"/><text x="89.4870%" y="95.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.07%)</title><rect x="89.3107%" y="245" width="0.0737%" height="15" fill="rgb(225,139,18)"/><text x="89.5607%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (6 samples, 0.22%)</title><rect x="89.2001%" y="325" width="0.2212%" height="15" fill="rgb(230,137,11)"/><text x="89.4501%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (6 samples, 0.22%)</title><rect x="89.2001%" y="309" width="0.2212%" height="15" fill="rgb(212,28,1)"/><text x="89.4501%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (6 samples, 0.22%)</title><rect x="89.2001%" y="293" width="0.2212%" height="15" fill="rgb(248,164,17)"/><text x="89.4501%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (4 samples, 0.15%)</title><rect x="89.2739%" y="277" width="0.1474%" height="15" fill="rgb(222,171,42)"/><text x="89.5239%" y="287.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (4 samples, 0.15%)</title><rect x="89.2739%" y="261" width="0.1474%" height="15" fill="rgb(243,84,45)"/><text x="89.5239%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.04%)</title><rect x="89.3844%" y="245" width="0.0369%" height="15" fill="rgb(252,49,23)"/><text x="89.6344%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="89.3844%" y="229" width="0.0369%" height="15" fill="rgb(215,19,7)"/><text x="89.6344%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="90.6008%" y="309" width="0.0369%" height="15" fill="rgb(238,81,41)"/><text x="90.8508%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (85 samples, 3.13%)</title><rect x="89.4213%" y="325" width="3.1331%" height="15" fill="rgb(210,199,37)"/><text x="89.6713%" y="335.50">has..</text></g><g><title>hashbrown::raw::is_full (52 samples, 1.92%)</title><rect x="90.6377%" y="309" width="1.9167%" height="15" fill="rgb(244,192,49)"/><text x="90.8877%" y="319.50">h..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,434 samples, 89.72%)</title><rect x="4.6074%" y="453" width="89.7162%" height="15" fill="rgb(226,211,11)"/><text x="4.8574%" y="463.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,434 samples, 89.72%)</title><rect x="4.6074%" y="437" width="89.7162%" height="15" fill="rgb(236,162,54)"/><text x="4.8574%" y="447.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2,425 samples, 89.38%)</title><rect x="4.9392%" y="421" width="89.3844%" height="15" fill="rgb(220,229,9)"/><text x="5.1892%" y="431.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>aoc20::day24::part2::{{closure}} (2,346 samples, 86.47%)</title><rect x="7.8511%" y="405" width="86.4725%" height="15" fill="rgb(250,87,22)"/><text x="8.1011%" y="415.50">aoc20::day24::part2::{{closure}}</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (705 samples, 25.99%)</title><rect x="68.3376%" y="389" width="25.9860%" height="15" fill="rgb(239,43,17)"/><text x="68.5876%" y="399.50">std::collections::hash::set::HashSet&lt;T,S&gt;:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (705 samples, 25.99%)</title><rect x="68.3376%" y="373" width="25.9860%" height="15" fill="rgb(231,177,25)"/><text x="68.5876%" y="383.50">hashbrown::set::HashSet&lt;T,S,A&gt;::insert</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (686 samples, 25.29%)</title><rect x="69.0380%" y="357" width="25.2857%" height="15" fill="rgb(219,179,1)"/><text x="69.2880%" y="367.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (186 samples, 6.86%)</title><rect x="87.4677%" y="341" width="6.8559%" height="15" fill="rgb(238,219,53)"/><text x="87.7177%" y="351.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (48 samples, 1.77%)</title><rect x="92.5544%" y="325" width="1.7693%" height="15" fill="rgb(232,167,36)"/><text x="92.8044%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (10 samples, 0.37%)</title><rect x="93.9550%" y="309" width="0.3686%" height="15" fill="rgb(244,19,51)"/><text x="94.2050%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (10 samples, 0.37%)</title><rect x="93.9550%" y="293" width="0.3686%" height="15" fill="rgb(224,6,22)"/><text x="94.2050%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.11%)</title><rect x="94.6185%" y="357" width="0.1106%" height="15" fill="rgb(224,145,5)"/><text x="94.8685%" y="367.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.55%)</title><rect x="94.3236%" y="453" width="0.5529%" height="15" fill="rgb(234,130,49)"/><text x="94.5736%" y="463.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.55%)</title><rect x="94.3236%" y="437" width="0.5529%" height="15" fill="rgb(254,6,2)"/><text x="94.5736%" y="447.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.55%)</title><rect x="94.3236%" y="421" width="0.5529%" height="15" fill="rgb(208,96,46)"/><text x="94.5736%" y="431.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.55%)</title><rect x="94.3236%" y="405" width="0.5529%" height="15" fill="rgb(239,3,39)"/><text x="94.5736%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.55%)</title><rect x="94.3236%" y="389" width="0.5529%" height="15" fill="rgb(233,210,1)"/><text x="94.5736%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.55%)</title><rect x="94.3236%" y="373" width="0.5529%" height="15" fill="rgb(244,137,37)"/><text x="94.5736%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (4 samples, 0.15%)</title><rect x="94.7291%" y="357" width="0.1474%" height="15" fill="rgb(240,136,2)"/><text x="94.9791%" y="367.50"></text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::at (2 samples, 0.07%)</title><rect x="95.2083%" y="261" width="0.0737%" height="15" fill="rgb(239,18,37)"/><text x="95.4583%" y="271.50"></text></g><g><title>regex::input::Char::len_utf8 (2 samples, 0.07%)</title><rect x="95.2083%" y="245" width="0.0737%" height="15" fill="rgb(218,185,22)"/><text x="95.4583%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (2 samples, 0.07%)</title><rect x="95.2083%" y="229" width="0.0737%" height="15" fill="rgb(225,218,4)"/><text x="95.4583%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.04%)</title><rect x="95.2820%" y="229" width="0.0369%" height="15" fill="rgb(230,182,32)"/><text x="95.5320%" y="239.50"></text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::prefix_at::{{closure}} (1 samples, 0.04%)</title><rect x="95.2820%" y="213" width="0.0369%" height="15" fill="rgb(242,56,43)"/><text x="95.5320%" y="223.50"></text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::at (1 samples, 0.04%)</title><rect x="95.2820%" y="197" width="0.0369%" height="15" fill="rgb(233,99,24)"/><text x="95.5320%" y="207.50"></text></g><g><title>regex::utf8::decode_utf8 (1 samples, 0.04%)</title><rect x="95.2820%" y="181" width="0.0369%" height="15" fill="rgb(234,209,42)"/><text x="95.5320%" y="191.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::hash (1 samples, 0.04%)</title><rect x="95.5769%" y="181" width="0.0369%" height="15" fill="rgb(227,7,12)"/><text x="95.8269%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="95.5769%" y="165" width="0.0369%" height="15" fill="rgb(245,203,43)"/><text x="95.8269%" y="175.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::find_at (8 samples, 0.29%)</title><rect x="95.3557%" y="197" width="0.2949%" height="15" fill="rgb(238,205,33)"/><text x="95.6057%" y="207.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::verify (1 samples, 0.04%)</title><rect x="95.6137%" y="181" width="0.0369%" height="15" fill="rgb(231,56,7)"/><text x="95.8637%" y="191.50"></text></g><g><title>aho_corasick::packed::pattern::Pattern::is_prefix (1 samples, 0.04%)</title><rect x="95.6137%" y="165" width="0.0369%" height="15" fill="rgb(244,186,29)"/><text x="95.8637%" y="175.50"></text></g><g><title>&lt;regex::input::CharInput as regex::input::Input&gt;::prefix_at (12 samples, 0.44%)</title><rect x="95.2820%" y="245" width="0.4423%" height="15" fill="rgb(234,111,31)"/><text x="95.5320%" y="255.50"></text></g><g><title>regex::literal::imp::LiteralSearcher::find (11 samples, 0.41%)</title><rect x="95.3188%" y="229" width="0.4055%" height="15" fill="rgb(241,149,10)"/><text x="95.5688%" y="239.50"></text></g><g><title>aho_corasick::packed::api::Searcher::find (10 samples, 0.37%)</title><rect x="95.3557%" y="213" width="0.3686%" height="15" fill="rgb(249,206,44)"/><text x="95.6057%" y="223.50"></text></g><g><title>aho_corasick::packed::teddy::runtime::Teddy::find_at (2 samples, 0.07%)</title><rect x="95.6506%" y="197" width="0.0737%" height="15" fill="rgb(251,153,30)"/><text x="95.9006%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.04%)</title><rect x="95.9086%" y="229" width="0.0369%" height="15" fill="rgb(239,152,38)"/><text x="96.1586%" y="239.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="95.9086%" y="213" width="0.0369%" height="15" fill="rgb(249,139,47)"/><text x="96.1586%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="95.9454%" y="229" width="0.0369%" height="15" fill="rgb(244,64,35)"/><text x="96.1954%" y="239.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="95.9454%" y="213" width="0.0369%" height="15" fill="rgb(216,46,15)"/><text x="96.1954%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.04%)</title><rect x="96.3509%" y="213" width="0.0369%" height="15" fill="rgb(250,74,19)"/><text x="96.6009%" y="223.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="96.3509%" y="197" width="0.0369%" height="15" fill="rgb(249,42,33)"/><text x="96.6009%" y="207.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::has_visited (7 samples, 0.26%)</title><rect x="96.3878%" y="213" width="0.2580%" height="15" fill="rgb(242,149,17)"/><text x="96.6378%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="96.5721%" y="197" width="0.0737%" height="15" fill="rgb(244,29,21)"/><text x="96.8221%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="96.5721%" y="181" width="0.0737%" height="15" fill="rgb(220,130,37)"/><text x="96.8221%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="96.5721%" y="165" width="0.0737%" height="15" fill="rgb(211,67,2)"/><text x="96.8221%" y="175.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (46 samples, 1.70%)</title><rect x="95.0240%" y="357" width="1.6955%" height="15" fill="rgb(235,68,52)"/><text x="95.2740%" y="367.50"></text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at::{{closure}} (46 samples, 1.70%)</title><rect x="95.0240%" y="341" width="1.6955%" height="15" fill="rgb(246,142,3)"/><text x="95.2740%" y="351.50"></text></g><g><title>regex::exec::ExecNoSync::captures_nfa_type (46 samples, 1.70%)</title><rect x="95.0240%" y="325" width="1.6955%" height="15" fill="rgb(241,25,7)"/><text x="95.2740%" y="335.50"></text></g><g><title>regex::exec::ExecNoSync::exec_nfa (46 samples, 1.70%)</title><rect x="95.0240%" y="309" width="1.6955%" height="15" fill="rgb(242,119,39)"/><text x="95.2740%" y="319.50"></text></g><g><title>regex::exec::ExecNoSync::exec_backtrack (43 samples, 1.58%)</title><rect x="95.1345%" y="293" width="1.5850%" height="15" fill="rgb(241,98,45)"/><text x="95.3845%" y="303.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec (43 samples, 1.58%)</title><rect x="95.1345%" y="277" width="1.5850%" height="15" fill="rgb(254,28,30)"/><text x="95.3845%" y="287.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::exec_ (39 samples, 1.44%)</title><rect x="95.2820%" y="261" width="1.4375%" height="15" fill="rgb(241,142,54)"/><text x="95.5320%" y="271.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::backtrack (27 samples, 1.00%)</title><rect x="95.7243%" y="245" width="0.9952%" height="15" fill="rgb(222,85,15)"/><text x="95.9743%" y="255.50"></text></g><g><title>regex::backtrack::Bounded&lt;I&gt;::step (20 samples, 0.74%)</title><rect x="95.9823%" y="229" width="0.7372%" height="15" fill="rgb(210,85,47)"/><text x="96.2323%" y="239.50"></text></g><g><title>regex::utf8::decode_utf8 (2 samples, 0.07%)</title><rect x="96.6458%" y="213" width="0.0737%" height="15" fill="rgb(224,206,25)"/><text x="96.8958%" y="223.50"></text></g><g><title>aho_corasick::packed::api::Searcher::find_at (1 samples, 0.04%)</title><rect x="96.7195%" y="309" width="0.0369%" height="15" fill="rgb(243,201,19)"/><text x="96.9695%" y="319.50"></text></g><g><title>&lt;regex::exec::ExecNoSyncStr as regex::re_trait::RegularExpression&gt;::captures_read_at (53 samples, 1.95%)</title><rect x="94.9871%" y="389" width="1.9536%" height="15" fill="rgb(236,59,4)"/><text x="95.2371%" y="399.50">&lt;..</text></g><g><title>&lt;regex::exec::ExecNoSync as regex::re_trait::RegularExpression&gt;::captures_read_at (53 samples, 1.95%)</title><rect x="94.9871%" y="373" width="1.9536%" height="15" fill="rgb(254,179,45)"/><text x="95.2371%" y="383.50">&lt;..</text></g><g><title>regex::exec::ExecNoSync::find_literals (6 samples, 0.22%)</title><rect x="96.7195%" y="357" width="0.2212%" height="15" fill="rgb(226,14,10)"/><text x="96.9695%" y="367.50"></text></g><g><title>regex::literal::imp::LiteralSearcher::find (6 samples, 0.22%)</title><rect x="96.7195%" y="341" width="0.2212%" height="15" fill="rgb(244,27,41)"/><text x="96.9695%" y="351.50"></text></g><g><title>aho_corasick::packed::api::Searcher::find (6 samples, 0.22%)</title><rect x="96.7195%" y="325" width="0.2212%" height="15" fill="rgb(235,35,32)"/><text x="96.9695%" y="335.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::find_at (5 samples, 0.18%)</title><rect x="96.7564%" y="309" width="0.1843%" height="15" fill="rgb(218,68,31)"/><text x="97.0064%" y="319.50"></text></g><g><title>aho_corasick::packed::rabinkarp::RabinKarp::verify (2 samples, 0.07%)</title><rect x="96.8669%" y="293" width="0.0737%" height="15" fill="rgb(207,120,37)"/><text x="97.1169%" y="303.50"></text></g><g><title>aho_corasick::packed::pattern::Pattern::is_prefix (2 samples, 0.07%)</title><rect x="96.8669%" y="277" width="0.0737%" height="15" fill="rgb(227,98,0)"/><text x="97.1169%" y="287.50"></text></g><g><title>aho_corasick::packed::pattern::Pattern::equals (2 samples, 0.07%)</title><rect x="96.8669%" y="261" width="0.0737%" height="15" fill="rgb(207,7,3)"/><text x="97.1169%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="96.8669%" y="245" width="0.0737%" height="15" fill="rgb(206,98,19)"/><text x="97.1169%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2 samples, 0.07%)</title><rect x="96.8669%" y="229" width="0.0737%" height="15" fill="rgb(217,5,26)"/><text x="97.1169%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.04%)</title><rect x="96.9407%" y="325" width="0.0369%" height="15" fill="rgb(235,190,38)"/><text x="97.1907%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.07%)</title><rect x="96.9407%" y="341" width="0.0737%" height="15" fill="rgb(247,86,24)"/><text x="97.1907%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="96.9775%" y="325" width="0.0369%" height="15" fill="rgb(205,101,16)"/><text x="97.2275%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="96.9775%" y="309" width="0.0369%" height="15" fill="rgb(246,168,33)"/><text x="97.2275%" y="319.50"></text></g><g><title>&lt;regex::re_trait::CaptureMatches&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 2.17%)</title><rect x="94.8765%" y="405" width="2.1747%" height="15" fill="rgb(231,114,1)"/><text x="95.1265%" y="415.50">&lt;..</text></g><g><title>regex::re_trait::RegularExpression::locations (3 samples, 0.11%)</title><rect x="96.9407%" y="389" width="0.1106%" height="15" fill="rgb(207,184,53)"/><text x="97.1907%" y="399.50"></text></g><g><title>alloc::vec::from_elem (3 samples, 0.11%)</title><rect x="96.9407%" y="373" width="0.1106%" height="15" fill="rgb(224,95,51)"/><text x="97.1907%" y="383.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3 samples, 0.11%)</title><rect x="96.9407%" y="357" width="0.1106%" height="15" fill="rgb(212,188,45)"/><text x="97.1907%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="97.0144%" y="341" width="0.0369%" height="15" fill="rgb(223,154,38)"/><text x="97.2644%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="97.0144%" y="325" width="0.0369%" height="15" fill="rgb(251,22,52)"/><text x="97.2644%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.04%)</title><rect x="97.0144%" y="309" width="0.0369%" height="15" fill="rgb(229,209,22)"/><text x="97.2644%" y="319.50"></text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 2.25%)</title><rect x="94.8765%" y="421" width="2.2484%" height="15" fill="rgb(234,138,34)"/><text x="95.1265%" y="431.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.07%)</title><rect x="97.0512%" y="405" width="0.0737%" height="15" fill="rgb(212,95,11)"/><text x="97.3012%" y="415.50"></text></g><g><title>&lt;regex::re_unicode::CaptureMatches as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (2 samples, 0.07%)</title><rect x="97.0512%" y="389" width="0.0737%" height="15" fill="rgb(240,179,47)"/><text x="97.3012%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="97.0512%" y="373" width="0.0737%" height="15" fill="rgb(240,163,11)"/><text x="97.3012%" y="383.50"></text></g><g><title>aoc20::day24::parse (62 samples, 2.29%)</title><rect x="94.8765%" y="453" width="2.2853%" height="15" fill="rgb(236,37,12)"/><text x="95.1265%" y="463.50">a..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (62 samples, 2.29%)</title><rect x="94.8765%" y="437" width="2.2853%" height="15" fill="rgb(232,164,16)"/><text x="95.1265%" y="447.50">c..</text></g><g><title>aoc20::day24::parse::{{closure}} (1 samples, 0.04%)</title><rect x="97.1250%" y="421" width="0.0369%" height="15" fill="rgb(244,205,15)"/><text x="97.3750%" y="431.50"></text></g><g><title>&lt;regex::re_unicode::Captures as core::ops::index::Index&lt;usize&gt;&gt;::index (1 samples, 0.04%)</title><rect x="97.1250%" y="405" width="0.0369%" height="15" fill="rgb(223,117,47)"/><text x="97.3750%" y="415.50"></text></g><g><title>regex::re_unicode::Captures::get (1 samples, 0.04%)</title><rect x="97.1250%" y="389" width="0.0369%" height="15" fill="rgb(244,107,35)"/><text x="97.3750%" y="399.50"></text></g><g><title>regex::re_trait::Locations::pos (1 samples, 0.04%)</title><rect x="97.1250%" y="373" width="0.0369%" height="15" fill="rgb(205,140,8)"/><text x="97.3750%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (1 samples, 0.04%)</title><rect x="97.4935%" y="309" width="0.0369%" height="15" fill="rgb(228,84,46)"/><text x="97.7435%" y="319.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.07%)</title><rect x="97.4935%" y="405" width="0.0737%" height="15" fill="rgb(254,188,9)"/><text x="97.7435%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B,C)&gt;::hash (2 samples, 0.07%)</title><rect x="97.4935%" y="389" width="0.0737%" height="15" fill="rgb(206,112,54)"/><text x="97.7435%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i32&gt;::hash (2 samples, 0.07%)</title><rect x="97.4935%" y="373" width="0.0737%" height="15" fill="rgb(216,84,49)"/><text x="97.7435%" y="383.50"></text></g><g><title>core::hash::Hasher::write_i32 (2 samples, 0.07%)</title><rect x="97.4935%" y="357" width="0.0737%" height="15" fill="rgb(214,194,35)"/><text x="97.7435%" y="367.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u32 (2 samples, 0.07%)</title><rect x="97.4935%" y="341" width="0.0737%" height="15" fill="rgb(249,28,3)"/><text x="97.7435%" y="351.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (2 samples, 0.07%)</title><rect x="97.4935%" y="325" width="0.0737%" height="15" fill="rgb(222,56,52)"/><text x="97.7435%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1 samples, 0.04%)</title><rect x="97.5304%" y="309" width="0.0369%" height="15" fill="rgb(245,217,50)"/><text x="97.7804%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.48%)</title><rect x="97.6778%" y="373" width="0.4792%" height="15" fill="rgb(213,201,24)"/><text x="97.9278%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.48%)</title><rect x="97.6778%" y="357" width="0.4792%" height="15" fill="rgb(248,116,28)"/><text x="97.9278%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.44%)</title><rect x="97.7147%" y="341" width="0.4423%" height="15" fill="rgb(219,72,43)"/><text x="97.9647%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.07%)</title><rect x="98.0833%" y="325" width="0.0737%" height="15" fill="rgb(209,138,14)"/><text x="98.3333%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1 samples, 0.04%)</title><rect x="98.1570%" y="373" width="0.0369%" height="15" fill="rgb(222,18,33)"/><text x="98.4070%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B,C)&gt;::eq (1 samples, 0.04%)</title><rect x="98.1570%" y="357" width="0.0369%" height="15" fill="rgb(213,199,7)"/><text x="98.4070%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (3 samples, 0.11%)</title><rect x="98.1939%" y="325" width="0.1106%" height="15" fill="rgb(250,110,10)"/><text x="98.4439%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (21 samples, 0.77%)</title><rect x="97.5673%" y="405" width="0.7741%" height="15" fill="rgb(248,123,6)"/><text x="97.8173%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (21 samples, 0.77%)</title><rect x="97.5673%" y="389" width="0.7741%" height="15" fill="rgb(206,91,31)"/><text x="97.8173%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (4 samples, 0.15%)</title><rect x="98.1939%" y="373" width="0.1474%" height="15" fill="rgb(211,154,13)"/><text x="98.4439%" y="383.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (4 samples, 0.15%)</title><rect x="98.1939%" y="357" width="0.1474%" height="15" fill="rgb(225,148,7)"/><text x="98.4439%" y="367.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (4 samples, 0.15%)</title><rect x="98.1939%" y="341" width="0.1474%" height="15" fill="rgb(220,160,43)"/><text x="98.4439%" y="351.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="98.3045%" y="325" width="0.0369%" height="15" fill="rgb(213,52,39)"/><text x="98.5545%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (4 samples, 0.15%)</title><rect x="98.3413%" y="373" width="0.1474%" height="15" fill="rgb(243,137,7)"/><text x="98.5913%" y="383.50"></text></g><g><title>core::ptr::write (4 samples, 0.15%)</title><rect x="98.3413%" y="357" width="0.1474%" height="15" fill="rgb(230,79,13)"/><text x="98.5913%" y="367.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (5 samples, 0.18%)</title><rect x="98.3413%" y="389" width="0.1843%" height="15" fill="rgb(247,105,23)"/><text x="98.5913%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="98.4888%" y="373" width="0.0369%" height="15" fill="rgb(223,179,41)"/><text x="98.7388%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="98.4888%" y="357" width="0.0369%" height="15" fill="rgb(218,9,34)"/><text x="98.7388%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="98.4888%" y="341" width="0.0369%" height="15" fill="rgb(222,106,8)"/><text x="98.7388%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::copy_from_nonoverlapping (1 samples, 0.04%)</title><rect x="98.5256%" y="341" width="0.0369%" height="15" fill="rgb(211,220,0)"/><text x="98.7756%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="98.5256%" y="325" width="0.0369%" height="15" fill="rgb(229,52,16)"/><text x="98.7756%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="98.5256%" y="309" width="0.0369%" height="15" fill="rgb(212,155,18)"/><text x="98.7756%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="98.5256%" y="293" width="0.0369%" height="15" fill="rgb(242,21,14)"/><text x="98.7756%" y="303.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="98.7099%" y="309" width="0.0369%" height="15" fill="rgb(222,19,48)"/><text x="98.9599%" y="319.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.04%)</title><rect x="98.7468%" y="309" width="0.0369%" height="15" fill="rgb(232,45,27)"/><text x="98.9968%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (8 samples, 0.29%)</title><rect x="98.5625%" y="325" width="0.2949%" height="15" fill="rgb(249,103,42)"/><text x="98.8125%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.07%)</title><rect x="98.7836%" y="309" width="0.0737%" height="15" fill="rgb(246,81,33)"/><text x="99.0336%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.07%)</title><rect x="98.7836%" y="293" width="0.0737%" height="15" fill="rgb(252,33,42)"/><text x="99.0336%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (10 samples, 0.37%)</title><rect x="98.5256%" y="389" width="0.3686%" height="15" fill="rgb(209,212,41)"/><text x="98.7756%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 0.37%)</title><rect x="98.5256%" y="373" width="0.3686%" height="15" fill="rgb(207,154,6)"/><text x="98.7756%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::resize (10 samples, 0.37%)</title><rect x="98.5256%" y="357" width="0.3686%" height="15" fill="rgb(223,64,47)"/><text x="98.7756%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (9 samples, 0.33%)</title><rect x="98.5625%" y="341" width="0.3317%" height="15" fill="rgb(211,161,38)"/><text x="98.8125%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (1 samples, 0.04%)</title><rect x="98.8574%" y="325" width="0.0369%" height="15" fill="rgb(219,138,40)"/><text x="99.1074%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (1 samples, 0.04%)</title><rect x="98.8574%" y="309" width="0.0369%" height="15" fill="rgb(241,228,46)"/><text x="99.1074%" y="319.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="98.9679%" y="373" width="0.0369%" height="15" fill="rgb(223,209,38)"/><text x="99.2179%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (13 samples, 0.48%)</title><rect x="98.8942%" y="389" width="0.4792%" height="15" fill="rgb(236,164,45)"/><text x="99.1442%" y="399.50"></text></g><g><title>hashbrown::raw::is_full (10 samples, 0.37%)</title><rect x="99.0048%" y="373" width="0.3686%" height="15" fill="rgb(231,15,5)"/><text x="99.2548%" y="383.50"></text></g><g><title>libc_start_main_stage2 (2,679 samples, 98.75%)</title><rect x="0.8109%" y="549" width="98.7468%" height="15" fill="rgb(252,35,15)"/><text x="1.0609%" y="559.50">libc_start_main_stage2</text></g><g><title>main (2,679 samples, 98.75%)</title><rect x="0.8109%" y="533" width="98.7468%" height="15" fill="rgb(248,181,18)"/><text x="1.0609%" y="543.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,679 samples, 98.75%)</title><rect x="0.8109%" y="517" width="98.7468%" height="15" fill="rgb(233,39,42)"/><text x="1.0609%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,679 samples, 98.75%)</title><rect x="0.8109%" y="501" width="98.7468%" height="15" fill="rgb(238,110,33)"/><text x="1.0609%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>aoc20::main (2,679 samples, 98.75%)</title><rect x="0.8109%" y="485" width="98.7468%" height="15" fill="rgb(233,195,10)"/><text x="1.0609%" y="495.50">aoc20::main</text></g><g><title>aoc20::day24::part2 (2,604 samples, 95.98%)</title><rect x="3.5754%" y="469" width="95.9823%" height="15" fill="rgb(254,105,3)"/><text x="3.8254%" y="479.50">aoc20::day24::part2</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (65 samples, 2.40%)</title><rect x="97.1618%" y="453" width="2.3959%" height="15" fill="rgb(221,225,9)"/><text x="97.4118%" y="463.50">st..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (65 samples, 2.40%)</title><rect x="97.1618%" y="437" width="2.3959%" height="15" fill="rgb(224,227,45)"/><text x="97.4118%" y="447.50">ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (63 samples, 2.32%)</title><rect x="97.2355%" y="421" width="2.3222%" height="15" fill="rgb(229,198,43)"/><text x="97.4855%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (33 samples, 1.22%)</title><rect x="98.3413%" y="405" width="1.2164%" height="15" fill="rgb(206,209,35)"/><text x="98.5913%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (5 samples, 0.18%)</title><rect x="99.3734%" y="389" width="0.1843%" height="15" fill="rgb(245,195,53)"/><text x="99.6234%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (1 samples, 0.04%)</title><rect x="99.5208%" y="373" width="0.0369%" height="15" fill="rgb(240,92,26)"/><text x="99.7708%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (1 samples, 0.04%)</title><rect x="99.5208%" y="357" width="0.0369%" height="15" fill="rgb(207,40,23)"/><text x="99.7708%" y="367.50"></text></g><g><title>malloc (6 samples, 0.22%)</title><rect x="99.5577%" y="549" width="0.2212%" height="15" fill="rgb(223,111,35)"/><text x="99.8077%" y="559.50"></text></g><g><title>aoc20 (2,708 samples, 99.82%)</title><rect x="0.0000%" y="565" width="99.8157%" height="15" fill="rgb(229,147,28)"/><text x="0.2500%" y="575.50">aoc20</text></g><g><title>memset (1 samples, 0.04%)</title><rect x="99.7788%" y="549" width="0.0369%" height="15" fill="rgb(211,29,28)"/><text x="100.0288%" y="559.50"></text></g><g><title>all (2,713 samples, 100%)</title><rect x="0.0000%" y="581" width="100.0000%" height="15" fill="rgb(228,72,33)"/><text x="0.2500%" y="591.50"></text></g><g><title>perf (5 samples, 0.18%)</title><rect x="99.8157%" y="565" width="0.1843%" height="15" fill="rgb(205,214,31)"/><text x="100.0657%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="549" width="0.1843%" height="15" fill="rgb(224,111,15)"/><text x="100.0657%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="533" width="0.1843%" height="15" fill="rgb(253,21,26)"/><text x="100.0657%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="517" width="0.1843%" height="15" fill="rgb(245,139,43)"/><text x="100.0657%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="501" width="0.1843%" height="15" fill="rgb(252,170,7)"/><text x="100.0657%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="485" width="0.1843%" height="15" fill="rgb(231,118,14)"/><text x="100.0657%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="469" width="0.1843%" height="15" fill="rgb(238,83,0)"/><text x="100.0657%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="453" width="0.1843%" height="15" fill="rgb(221,39,39)"/><text x="100.0657%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="437" width="0.1843%" height="15" fill="rgb(222,119,46)"/><text x="100.0657%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="421" width="0.1843%" height="15" fill="rgb(222,165,49)"/><text x="100.0657%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="405" width="0.1843%" height="15" fill="rgb(219,113,52)"/><text x="100.0657%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="389" width="0.1843%" height="15" fill="rgb(214,7,15)"/><text x="100.0657%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="373" width="0.1843%" height="15" fill="rgb(235,32,4)"/><text x="100.0657%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.18%)</title><rect x="99.8157%" y="357" width="0.1843%" height="15" fill="rgb(238,90,54)"/><text x="100.0657%" y="367.50"></text></g></svg></svg>